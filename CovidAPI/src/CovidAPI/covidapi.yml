AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application that uses the ASP.NET Core framework running in Amazon Lambda.
Parameters: 
  Environment:
    Type: String
    Default: Dev
    Description: The environment the application is being deployed into
  IsolatedStackPrefix:
    Type: String
    Default: ''
Conditions: 
  IsProd: !Equals ["Prod", !Ref "Environment"]
  PipelineStack: !Equals
    - !Ref IsolatedStackPrefix
    - ''
Resources:
  AspNetCoreFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com

  LifecycleEventHookRole:
    Type: AWS::IAM::Role
    Condition: PipelineStack
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
  
  FunctionCloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IsolatedStackPrefix}CovidAPIFunctionCloudWatchPolicy
      Roles:
        - !Ref AspNetCoreFunctionRole
        - !If 
          - PipelineStack 
          - !Ref LifecycleEventHookRole
          - !Ref AWS::NoValue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  ApiDynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${IsolatedStackPrefix}CovidAPIDynamoDBPolicy
      Roles:
        - !Ref AspNetCoreFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            Effect: Allow
            Resource: 
              !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CovidAPITable}'
          - Action:
            - dynamodb:Query
            - dynamodb:Scan
            Effect: Allow
            Resource: 
              !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CovidAPITable}'

  FunctionXRayPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref AspNetCoreFunctionRole
        - !If 
          - PipelineStack 
          - !Ref LifecycleEventHookRole
          - !Ref AWS::NoValue
      PolicyName: !Sub ${IsolatedStackPrefix}CovidAPIFunctionXRayPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
          Effect: Allow
          Resource: "*"

  LifecycleFunctionCodeDeployPolicy:
    Type: AWS::IAM::Policy
    Condition: PipelineStack
    Properties:
      Roles: 
        - !Ref LifecycleEventHookRole
      PolicyName: LifecycleHookCodeDeployPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: codedeploy:PutLifecycleEventHookExecutionStatus
            Resource: "*"

  PreTrafficLifecycleFunction:
    Type: AWS::Serverless::Function
    Condition: PipelineStack
    Properties:
      FunctionName: CodeDeployHook_CovidSafeAPI_PreTrafficHook
      Handler: LifecycleHooks::LifecycleHooks.Function::PreTrafficHook
      Runtime: dotnet6
      MemorySize: 2048
      Role: 
        !GetAtt 
          - LifecycleEventHookRole
          - Arn
      CodeUri: "../LifecycleHooks"
      Environment:
        Variables:
          env: !Ref Environment
      Timeout: 30
      Tracing: Active

  PostTrafficLifecycleFunction:
    Type: AWS::Serverless::Function
    Condition: PipelineStack
    Properties:
      FunctionName: CodeDeployHook_CovidSafeAPI_PostTrafficHook
      Handler: LifecycleHooks::LifecycleHooks.Function::PostTrafficHook
      Runtime: dotnet6
      MemorySize: 2048
      Role: 
        !GetAtt 
          - LifecycleEventHookRole
          - Arn
      CodeUri: "../LifecycleHooks"
      Environment:
        Variables:
          env: !Ref Environment
      Timeout: 30
      Tracing: Active
      
  ApiErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref AWS::StackName
      EvaluationPeriods: 1
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Period: 60
      Statistic: Sum
      Threshold: 0

  AspNetCoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: CovidAPI::CovidAPI.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet6
      MemorySize: 2048
      CodeUri: ""
      Environment:
        Variables:
          env: !Ref Environment
          TablePrefix: !Ref IsolatedStackPrefix
      Timeout: 30
      Tracing: Active
      AutoPublishAlias: live
      DeploymentPreference:
        Type: !If [IsProd, Linear10PercentEvery1Minute, AllAtOnce]
        Alarms:
          # A list of alarms that you want to monitor
          - !Ref ApiErrorMetricGreaterThanZeroAlarm
        Hooks:
          PreTraffic: !If 
            - PipelineStack
            - !Ref PreTrafficLifecycleFunction
            - !Ref AWS::NoValue
          PostTraffic: !If 
            - PipelineStack
            - !Ref PostTrafficLifecycleFunction
            - !Ref AWS::NoValue
      Role: 
        !GetAtt 
          - AspNetCoreFunctionRole
          - Arn
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        RootResource:
          Type: Api
          Properties:
            Path: /
            Method: ANY
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: ""
  CovidAPITable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${IsolatedStackPrefix}CovidAPI
Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/

